// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 6:44 PM on Tuesday, July 19, 2016.
	/// </remarks>
	public partial class Model_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the Observations property</summary>
		private bool[][] observations;
		/// <summary>Field backing the Reliability_Prior property</summary>
		private Beta[] reliability_Prior;
		/// <summary>Field backing the Cluster_Prior property</summary>
		private Discrete[] cluster_Prior;
		/// <summary>Field backing the Channel_Prior property</summary>
		private Beta[][] channel_Prior;
		/// <summary>Field backing the vbool____3 property</summary>
		private bool[][] Vbool____3;
		/// <summary>The number of iterations last computed by Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3. Set this to zero to force re-execution of Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3</summary>
		public int Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1</summary>
		public int Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3. Set this to zero to force re-execution of Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3</summary>
		public int Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_iterationsDone;
		/// <summary>True if Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3 has performed initialisation. Set this to false to force re-execution of Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3</summary>
		public bool Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_isInitialised;
		/// <summary>Message from use of 'Device_Reliability'</summary>
		public DistributionStructArray<Beta,double> Device_Reliability_use_B;
		/// <summary>Message from use of 'Channel_Availibility_for_Cluster'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> Channel_Availibility_for_Cluster_use_B;
		/// <summary>Message from use of 'Channel_Specific_Reliability'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Channel_Specific_Reliability_use_B;
		/// <summary>Message to marginal of 'Device_Reliability'</summary>
		public DistributionStructArray<Beta,double> Device_Reliability_marginal_F;
		/// <summary>Message to marginal of 'Channel_Availibility_for_Cluster'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> Channel_Availibility_for_Cluster_marginal_F;
		/// <summary>Message to marginal of 'Cluster_Assignment'</summary>
		public DistributionRefArray<Discrete,int> Cluster_Assignment_marginal_F;
		/// <summary>Message to marginal of 'Channel_Specific_Reliability'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Channel_Specific_Reliability_marginal_F;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Observations_marginal;
		public PointMass<Beta[]> Reliability_Prior_marginal;
		public PointMass<Discrete[]> Cluster_Prior_marginal;
		public PointMass<Beta[][]> Channel_Prior_marginal;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool____3_marginal;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'Observations'</summary>
		public bool[][] Observations
		{
			get {
				return this.observations;
			}
			set {
				if ((value!=null)&&(value.Length!=8)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+8)+" was expected for variable \'Observations\'");
				}
				this.observations = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone = 0;
				this.Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'Reliability_Prior'</summary>
		public Beta[] Reliability_Prior
		{
			get {
				return this.reliability_Prior;
			}
			set {
				if ((value!=null)&&(value.Length!=8)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+8)+" was expected for variable \'Reliability_Prior\'");
				}
				this.reliability_Prior = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone = 0;
				this.Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'Cluster_Prior'</summary>
		public Discrete[] Cluster_Prior
		{
			get {
				return this.cluster_Prior;
			}
			set {
				if ((value!=null)&&(value.Length!=8)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+8)+" was expected for variable \'Cluster_Prior\'");
				}
				this.cluster_Prior = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone = 0;
				this.Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'Channel_Prior'</summary>
		public Beta[][] Channel_Prior
		{
			get {
				return this.channel_Prior;
			}
			set {
				if ((value!=null)&&(value.Length!=8)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+8)+" was expected for variable \'Channel_Prior\'");
				}
				this.channel_Prior = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone = 0;
				this.Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'vbool____3'</summary>
		public bool[][] vbool____3
		{
			get {
				return this.Vbool____3;
			}
			set {
				if ((value!=null)&&(value.Length!=8)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+8)+" was expected for variable \'vbool____3\'");
				}
				this.Vbool____3 = value;
				this.numberOfIterationsDone = 0;
				this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone = 0;
				this.Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="Observations") {
				return this.Observations;
			}
			if (variableName=="Reliability_Prior") {
				return this.Reliability_Prior;
			}
			if (variableName=="Cluster_Prior") {
				return this.Cluster_Prior;
			}
			if (variableName=="Channel_Prior") {
				return this.Channel_Prior;
			}
			if (variableName=="vbool____3") {
				return this.vbool____3;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="Observations") {
				this.Observations = (bool[][])value;
				return ;
			}
			if (variableName=="Reliability_Prior") {
				this.Reliability_Prior = (Beta[])value;
				return ;
			}
			if (variableName=="Cluster_Prior") {
				this.Cluster_Prior = (Discrete[])value;
				return ;
			}
			if (variableName=="Channel_Prior") {
				this.Channel_Prior = (Beta[][])value;
				return ;
			}
			if (variableName=="vbool____3") {
				this.vbool____3 = (bool[][])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="Device_Reliability") {
				return this.Device_ReliabilityMarginal();
			}
			if (variableName=="Channel_Specific_Reliability") {
				return this.Channel_Specific_ReliabilityMarginal();
			}
			if (variableName=="Cluster_Assignment") {
				return this.Cluster_AssignmentMarginal();
			}
			if (variableName=="Channel_Availibility_for_Cluster") {
				return this.Channel_Availibility_for_ClusterMarginal();
			}
			if (variableName=="Observations") {
				return this.ObservationsMarginal();
			}
			if (variableName=="Reliability_Prior") {
				return this.Reliability_PriorMarginal();
			}
			if (variableName=="Cluster_Prior") {
				return this.Cluster_PriorMarginal();
			}
			if (variableName=="Channel_Prior") {
				return this.Channel_PriorMarginal();
			}
			if (variableName=="vbool____3") {
				return this.Vbool____3Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone) {
				this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone = 0;
			}
			this.Constant();
			this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3(initialise);
			this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1(numberOfIterations);
			this.Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			// Create array for 'Device_Reliability_use' Backwards messages.
			this.Device_Reliability_use_B = new DistributionStructArray<Beta,double>(8);
			// Create array for 'Channel_Availibility_for_Cluster_use' Backwards messages.
			this.Channel_Availibility_for_Cluster_use_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(8);
			for(int l = 0; l<8; l++) {
				// Create array for 'Channel_Availibility_for_Cluster_use' Backwards messages.
				this.Channel_Availibility_for_Cluster_use_B[l] = new DistributionStructArray<Beta,double>(6);
			}
			// Create array for 'Channel_Specific_Reliability_use' Backwards messages.
			this.Channel_Specific_Reliability_use_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for 'Channel_Specific_Reliability_use' Backwards messages.
				this.Channel_Specific_Reliability_use_B[n] = new DistributionStructArray<Bernoulli,bool>(6);
			}
			this.Constant_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_iterationsDone = 0;
		}

		/// <summary>Computations that must reset on changes to numberOfIterationsDecreased and Reliability_Prior and Channel_Prior and vbool____3 and Observations and Cluster_Prior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3(bool initialise)
		{
			if ((this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_iterationsDone==1)&&((!initialise)||this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_isInitialised)) {
				return ;
			}
			for(int n = 0; n<8; n++) {
				this.Device_Reliability_use_B[n] = Beta.Uniform();
			}
			for(int l = 0; l<8; l++) {
				for(int m = 0; m<6; m++) {
					this.Channel_Availibility_for_Cluster_use_B[l][m] = Beta.Uniform();
				}
			}
			for(int n = 0; n<8; n++) {
				for(int m = 0; m<6; m++) {
					this.Channel_Specific_Reliability_use_B[n][m] = Bernoulli.Uniform();
				}
			}
			this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_Pri3_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and Reliability_Prior and Channel_Prior and vbool____3 and Observations and Cluster_Prior</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone==numberOfIterations) {
				return ;
			}
			// Create array for 'Device_Reliability_marginal' Forwards messages.
			this.Device_Reliability_marginal_F = new DistributionStructArray<Beta,double>(8);
			for(int n = 0; n<8; n++) {
				this.Device_Reliability_marginal_F[n] = Beta.Uniform();
			}
			// Create array for replicates of '_hoist'
			DistributionStructArray<Bernoulli,bool> _hoist = new DistributionStructArray<Bernoulli,bool>(8);
			for(int n = 0; n<8; n++) {
				for(int m = 0; m<6; m++) {
					_hoist[n] = Bernoulli.Uniform();
					m = 6-1;
				}
			}
			// Create array for replicates of 'Cluster_Assignment_n__selector_uses_B'
			Discrete[][] Cluster_Assignment_n__selector_uses_B = new Discrete[8][];
			for(int n = 0; n<8; n++) {
				// Create array for 'Cluster_Assignment_n__selector_uses' Backwards messages.
				Cluster_Assignment_n__selector_uses_B[n] = new Discrete[3];
				for(int _ind = 0; _ind<3; _ind++) {
					Cluster_Assignment_n__selector_uses_B[n][_ind] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(8));
				}
			}
			// Create array for replicates of 'Cluster_Assignment_n__selector_cases_depth1_uses_B'
			DistributionStructArray<Bernoulli,bool>[][] Cluster_Assignment_n__selector_cases_depth1_uses_B = new DistributionStructArray<Bernoulli,bool>[8][];
			for(int n = 0; n<8; n++) {
				// Create array for 'Cluster_Assignment_n__selector_cases_depth1_uses' Backwards messages.
				Cluster_Assignment_n__selector_cases_depth1_uses_B[n] = new DistributionStructArray<Bernoulli,bool>[8];
				for(int _iv = 0; _iv<8; _iv++) {
					// Create array for 'Cluster_Assignment_n__selector_cases_depth1_uses' Backwards messages.
					Cluster_Assignment_n__selector_cases_depth1_uses_B[n][_iv] = new DistributionStructArray<Bernoulli,bool>(12);
					for(int _ind = 0; _ind<12; _ind++) {
						Cluster_Assignment_n__selector_cases_depth1_uses_B[n][_iv][_ind] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B'
			DistributionStructArray<Bernoulli,bool>[][][] Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B = new DistributionStructArray<Bernoulli,bool>[8][][];
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B'
				Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B[n] = new DistributionStructArray<Bernoulli,bool>[8][];
				for(int l = 0; l<8; l++) {
					// Create array for 'Cluster_Assignment_n__selector_cases_depth1_rep4_uses' Backwards messages.
					Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B[n][l] = new DistributionStructArray<Bernoulli,bool>[6];
					for(int m = 0; m<6; m++) {
						// Create array for 'Cluster_Assignment_n__selector_cases_depth1_rep4_uses' Backwards messages.
						Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B[n][l][m] = new DistributionStructArray<Bernoulli,bool>(5);
						for(int _ind = 0; _ind<5; _ind++) {
							Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B[n][l][m][_ind] = Bernoulli.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B'
			Bernoulli[][][][] Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B = new Bernoulli[8][][][];
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B'
				Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B[n] = new Bernoulli[8][][];
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B'
					Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B[n][l] = new Bernoulli[6][];
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							// Create array for 'Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses' Backwards messages.
							Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B[n][l][m] = new Bernoulli[3];
							for(int _ind = 0; _ind<3; _ind++) {
								Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B[n][l][m][_ind] = Bernoulli.Uniform();
							}
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Availibility_for_Cluster_l_m__0__B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> Channel_Availibility_for_Cluster_l_m__0__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Availibility_for_Cluster_l_m__0__B'
				Channel_Availibility_for_Cluster_l_m__0__B[n] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Availibility_for_Cluster_l_m__0__B'
					Channel_Availibility_for_Cluster_l_m__0__B[n][l] = new DistributionStructArray<Beta,double>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							Channel_Availibility_for_Cluster_l_m__0__B[n][l][m] = Beta.Uniform();
							// Message to 'Channel_Availibility_for_Cluster_l_m__0_' from Bernoulli factor
							Channel_Availibility_for_Cluster_l_m__0__B[n][l][m] = BernoulliFromBetaOp.ProbTrueAverageLogarithm(this.observations[n][m]);
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Availibility_for_Cluster_l_m__depth1_B'
			DistributionRefArray<DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>,double[][][]> Channel_Availibility_for_Cluster_l_m__depth1_B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>,double[][][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Availibility_for_Cluster_l_m__depth1_B'
				Channel_Availibility_for_Cluster_l_m__depth1_B[n] = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Availibility_for_Cluster_l_m__depth1_B'
					Channel_Availibility_for_Cluster_l_m__depth1_B[n][l] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							// Create array for 'Channel_Availibility_for_Cluster_l_m__depth1' Backwards messages.
							Channel_Availibility_for_Cluster_l_m__depth1_B[n][l][m] = new DistributionStructArray<Beta,double>(2);
							for(int _gateind = 0; _gateind<2; _gateind++) {
								Channel_Availibility_for_Cluster_l_m__depth1_B[n][l][m][_gateind] = Beta.Uniform();
							}
							// Message to 'Channel_Availibility_for_Cluster_l_m__depth1' from Copy factor
							Channel_Availibility_for_Cluster_l_m__depth1_B[n][l][m][0] = ArrayHelper.SetTo<Beta>(Channel_Availibility_for_Cluster_l_m__depth1_B[n][l][m][0], Channel_Availibility_for_Cluster_l_m__0__B[n][l][m]);
						}
					}
				}
			}
			// Create array for replicates of 'vbool10_F'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> vbool10_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'vbool10_F'
				vbool10_F[n] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'vbool10_F'
					vbool10_F[n][l] = new DistributionStructArray<Bernoulli,bool>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							vbool10_F[n][l][m] = Bernoulli.Uniform();
						}
					}
				}
			}
			// Message from use of 'vbool10'
			// Create array for replicates of 'vbool10_use_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> vbool10_use_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'vbool10_use_B'
				vbool10_use_B[n] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'vbool10_use_B'
					vbool10_use_B[n][l] = new DistributionStructArray<Bernoulli,bool>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							vbool10_use_B[n][l][m] = Bernoulli.Uniform();
							// Message to 'vbool10_use' from Not factor
							vbool10_use_B[n][l][m] = BooleanNotOp.BAverageLogarithm(this.observations[n][m]);
						}
					}
				}
			}
			// Message to marginal of 'vbool10'
			// Create array for replicates of 'vbool10_marginal_F'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> vbool10_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'vbool10_marginal_F'
				vbool10_marginal_F[n] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'vbool10_marginal_F'
					vbool10_marginal_F[n][l] = new DistributionStructArray<Bernoulli,bool>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							vbool10_marginal_F[n][l][m] = Bernoulli.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Availibility_for_Cluster_l_m__1__B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> Channel_Availibility_for_Cluster_l_m__1__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Availibility_for_Cluster_l_m__1__B'
				Channel_Availibility_for_Cluster_l_m__1__B[n] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Availibility_for_Cluster_l_m__1__B'
					Channel_Availibility_for_Cluster_l_m__1__B[n][l] = new DistributionStructArray<Beta,double>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							Channel_Availibility_for_Cluster_l_m__1__B[n][l][m] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Availibility_for_Cluster_l__m_1__B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> Channel_Availibility_for_Cluster_l__m_1__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Availibility_for_Cluster_l__m_1__B'
				Channel_Availibility_for_Cluster_l__m_1__B[n] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Availibility_for_Cluster_l__m_1__B'
					Channel_Availibility_for_Cluster_l__m_1__B[n][l] = new DistributionStructArray<Beta,double>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							Channel_Availibility_for_Cluster_l__m_1__B[n][l][m] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Availibility_for_Cluster_l__B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> Channel_Availibility_for_Cluster_l__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Availibility_for_Cluster_l__B'
				Channel_Availibility_for_Cluster_l__B[n] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for 'Channel_Availibility_for_Cluster_l_' Backwards messages.
					Channel_Availibility_for_Cluster_l__B[n][l] = new DistributionStructArray<Beta,double>(6);
					for(int m = 0; m<6; m++) {
						Channel_Availibility_for_Cluster_l__B[n][l][m] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'Channel_Availibility_for_Cluster_rep_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> Channel_Availibility_for_Cluster_rep_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(8);
			for(int l = 0; l<8; l++) {
				// Create array for replicates of 'Channel_Availibility_for_Cluster_rep_B'
				Channel_Availibility_for_Cluster_rep_B[l] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(6);
				for(int m = 0; m<6; m++) {
					// Create array for 'Channel_Availibility_for_Cluster_rep' Backwards messages.
					Channel_Availibility_for_Cluster_rep_B[l][m] = new DistributionStructArray<Beta,double>(8);
					for(int n = 0; n<8; n++) {
						Channel_Availibility_for_Cluster_rep_B[l][m][n] = Beta.Uniform();
					}
				}
			}
			// Create array for 'Channel_Availibility_for_Cluster_marginal' Forwards messages.
			this.Channel_Availibility_for_Cluster_marginal_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(8);
			for(int l = 0; l<8; l++) {
				// Create array for 'Channel_Availibility_for_Cluster_marginal' Forwards messages.
				this.Channel_Availibility_for_Cluster_marginal_F[l] = new DistributionStructArray<Beta,double>(6);
				for(int m = 0; m<6; m++) {
					this.Channel_Availibility_for_Cluster_marginal_F[l][m] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B'
				Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B[n] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B'
					Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B[n][l] = new DistributionStructArray<Bernoulli,bool>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B[n][l][m] = Bernoulli.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B'
			DistributionRefArray<DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>,bool[][][]> Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>,bool[][][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B'
				Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n] = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B'
					Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							// Create array for 'Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1' Backwards messages.
							Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l][m] = new DistributionStructArray<Bernoulli,bool>(2);
							for(int _iv2 = 0; _iv2<2; _iv2++) {
								Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l][m][_iv2] = Bernoulli.Uniform();
							}
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B'
			Bernoulli[][][][] Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B = new Bernoulli[8][][][];
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B'
				Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B[n] = new Bernoulli[8][][];
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B'
					Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B[n][l] = new Bernoulli[6][];
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							// Create array for 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses' Backwards messages.
							Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B[n][l][m] = new Bernoulli[8];
							for(int _ind = 0; _ind<8; _ind++) {
								Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B[n][l][m][_ind] = Bernoulli.Uniform();
							}
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B'
				Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B[n] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B'
					Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B[n][l] = new DistributionStructArray<Bernoulli,bool>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B[n][l][m] = Bernoulli.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'Cluster_Assignment_n__selector_cases_depth1_rep4_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> Cluster_Assignment_n__selector_cases_depth1_rep4_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Cluster_Assignment_n__selector_cases_depth1_rep4_B'
				Cluster_Assignment_n__selector_cases_depth1_rep4_B[n] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for 'Cluster_Assignment_n__selector_cases_depth1_rep4' Backwards messages.
					Cluster_Assignment_n__selector_cases_depth1_rep4_B[n][l] = new DistributionStructArray<Bernoulli,bool>(6);
					for(int m = 0; m<6; m++) {
						Cluster_Assignment_n__selector_cases_depth1_rep4_B[n][l][m] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'Cluster_Assignment_n__selector_cases_depth1_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Cluster_Assignment_n__selector_cases_depth1_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for 'Cluster_Assignment_n__selector_cases_depth1' Backwards messages.
				Cluster_Assignment_n__selector_cases_depth1_B[n] = new DistributionStructArray<Bernoulli,bool>(8);
				for(int _iv = 0; _iv<8; _iv++) {
					Cluster_Assignment_n__selector_cases_depth1_B[n][_iv] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'Cluster_Assignment_n__selector_B'
			DistributionRefArray<Discrete,int> Cluster_Assignment_n__selector_B = new DistributionRefArray<Discrete,int>(8);
			for(int n = 0; n<8; n++) {
				Cluster_Assignment_n__selector_B[n] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(8));
			}
			// Create array for 'Cluster_Assignment_marginal' Forwards messages.
			this.Cluster_Assignment_marginal_F = new DistributionRefArray<Discrete,int>(8);
			for(int n = 0; n<8; n++) {
				this.Cluster_Assignment_marginal_F[n] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(8));
			}
			// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_uses_B'
			Bernoulli[][][][] Channel_Specific_Reliability_n__l_m_1__selector_uses_B = new Bernoulli[8][][][];
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_uses_B'
				Channel_Specific_Reliability_n__l_m_1__selector_uses_B[n] = new Bernoulli[8][][];
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_uses_B'
					Channel_Specific_Reliability_n__l_m_1__selector_uses_B[n][l] = new Bernoulli[6][];
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							// Create array for 'Channel_Specific_Reliability_n__l_m_1__selector_uses' Backwards messages.
							Channel_Specific_Reliability_n__l_m_1__selector_uses_B[n][l][m] = new Bernoulli[2];
							for(int _ind = 0; _ind<2; _ind++) {
								Channel_Specific_Reliability_n__l_m_1__selector_uses_B[n][l][m][_ind] = Bernoulli.Uniform();
							}
						}
					}
				}
			}
			Bernoulli _hoist4 = default(Bernoulli);
			for(int n = 0; n<8; n++) {
				for(int l = 0; l<8; l++) {
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							_hoist4 = ArrayHelper.CopyStorage<Bernoulli>(Channel_Specific_Reliability_n__l_m_1__selector_uses_B[n][l][m][1]);
							n = 8-1;
							l = 8-1;
							m = 6-1;
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> Channel_Specific_Reliability_n__l_m_1__selector_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_B'
				Channel_Specific_Reliability_n__l_m_1__selector_B[n] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for replicates of 'Channel_Specific_Reliability_n__l_m_1__selector_B'
					Channel_Specific_Reliability_n__l_m_1__selector_B[n][l] = new DistributionStructArray<Bernoulli,bool>(6);
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							Channel_Specific_Reliability_n__l_m_1__selector_B[n][l][m] = Bernoulli.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'Channel_Specific_Reliability_n__l_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> Channel_Specific_Reliability_n__l_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for replicates of 'Channel_Specific_Reliability_n__l_B'
				Channel_Specific_Reliability_n__l_B[n] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
				for(int l = 0; l<8; l++) {
					// Create array for 'Channel_Specific_Reliability_n__l' Backwards messages.
					Channel_Specific_Reliability_n__l_B[n][l] = new DistributionStructArray<Bernoulli,bool>(6);
					for(int m = 0; m<6; m++) {
						Channel_Specific_Reliability_n__l_B[n][l][m] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'Channel_Specific_Reliability_n__B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> Channel_Specific_Reliability_n__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for 'Channel_Specific_Reliability_n_' Backwards messages.
				Channel_Specific_Reliability_n__B[n] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(6);
				for(int m = 0; m<6; m++) {
					// Create array for 'Channel_Specific_Reliability_n_' Backwards messages.
					Channel_Specific_Reliability_n__B[n][m] = new DistributionStructArray<Bernoulli,bool>(8);
					for(int l = 0; l<8; l++) {
						Channel_Specific_Reliability_n__B[n][m][l] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for 'Channel_Specific_Reliability_marginal' Forwards messages.
			this.Channel_Specific_Reliability_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for 'Channel_Specific_Reliability_marginal' Forwards messages.
				this.Channel_Specific_Reliability_marginal_F[n] = new DistributionStructArray<Bernoulli,bool>(6);
				for(int m = 0; m<6; m++) {
					this.Channel_Specific_Reliability_marginal_F[n][m] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'Device_Reliability_rep_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> Device_Reliability_rep_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(8);
			for(int n = 0; n<8; n++) {
				// Create array for 'Device_Reliability_rep' Backwards messages.
				Device_Reliability_rep_B[n] = new DistributionStructArray<Beta,double>(6);
				for(int m = 0; m<6; m++) {
					Device_Reliability_rep_B[n][m] = Beta.Uniform();
				}
				// Message to 'Device_Reliability_marginal' from Variable factor
				this.Device_Reliability_marginal_F[n] = VariableVmpOp.MarginalAverageLogarithm<Beta>(this.Device_Reliability_use_B[n], this.reliability_Prior[n], this.Device_Reliability_marginal_F[n]);
				for(int m = 0; m<6; m++) {
					_hoist[n] = BernoulliFromBetaOp.SampleAverageLogarithm(this.Device_Reliability_marginal_F[n]);
					m = 6-1;
				}
				for(int m = 0; m<6; m++) {
					// Message to 'Channel_Specific_Reliability_marginal' from Variable factor
					this.Channel_Specific_Reliability_marginal_F[n][m] = VariableVmpOp.MarginalAverageLogarithm<Bernoulli>(this.Channel_Specific_Reliability_use_B[n][m], _hoist[n], this.Channel_Specific_Reliability_marginal_F[n][m]);
				}
			}
			for(int iteration = this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone; iteration<numberOfIterations; iteration++) {
				for(int n = 0; n<8; n++) {
					// Message to 'Device_Reliability_marginal' from Variable factor
					this.Device_Reliability_marginal_F[n] = VariableVmpOp.MarginalAverageLogarithm<Beta>(this.Device_Reliability_use_B[n], this.reliability_Prior[n], this.Device_Reliability_marginal_F[n]);
				}
				for(int l = 0; l<8; l++) {
					for(int m = 0; m<6; m++) {
						// Message to 'Channel_Availibility_for_Cluster_marginal' from Variable factor
						this.Channel_Availibility_for_Cluster_marginal_F[l][m] = VariableVmpOp.MarginalAverageLogarithm<Beta>(this.Channel_Availibility_for_Cluster_use_B[l][m], this.channel_Prior[l][m], this.Channel_Availibility_for_Cluster_marginal_F[l][m]);
						for(int n = 0; n<8; n++) {
							if (!this.Vbool____3[n][m]) {
								// Message to 'vbool10' from Bernoulli factor
								vbool10_F[n][l][m] = BernoulliFromBetaOp.SampleAverageLogarithm(this.Channel_Availibility_for_Cluster_marginal_F[l][m]);
								// Message to 'vbool10_marginal' from Variable factor
								vbool10_marginal_F[n][l][m] = VariableVmpOp.MarginalAverageLogarithm<Bernoulli>(vbool10_use_B[n][l][m], vbool10_F[n][l][m], vbool10_marginal_F[n][l][m]);
								// Message to 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses' from Variable factor
								Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B[n][l][m][6] = Bernoulli.FromLogOdds(VariableVmpOp.AverageLogFactor<Bernoulli>(vbool10_marginal_F[n][l][m]));
								// Message to 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses' from Bernoulli factor
								Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B[n][l][m][5] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.AverageLogFactor(vbool10_marginal_F[n][l][m], this.Channel_Availibility_for_Cluster_marginal_F[l][m]));
								// Message to 'Channel_Specific_Reliability_n__l_m_1__selector_cases_1' from Replicate factor
								Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B[n][l][m] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Channel_Specific_Reliability_n__l_m_1__selector_cases_1_uses_B[n][l][m], Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B[n][l][m]);
								// Message to 'Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1' from Copy factor
								Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l][m][1] = ArrayHelper.SetTo<Bernoulli>(Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l][m][1], Channel_Specific_Reliability_n__l_m_1__selector_cases_1_B[n][l][m]);
								// Message to 'Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses' from Bernoulli factor
								Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B[n][l][m][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.AverageLogFactor(this.observations[n][m], this.Channel_Availibility_for_Cluster_marginal_F[l][m]));
								// Message to 'Channel_Specific_Reliability_n__l_m_1__selector_cases_0' from Replicate factor
								Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B[n][l][m] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Channel_Specific_Reliability_n__l_m_1__selector_cases_0_uses_B[n][l][m], Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B[n][l][m]);
								// Message to 'Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1' from Copy factor
								Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l][m][0] = ArrayHelper.SetTo<Bernoulli>(Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l][m][0], Channel_Specific_Reliability_n__l_m_1__selector_cases_0_B[n][l][m]);
								// Message to 'Channel_Specific_Reliability_n__l_m_1__selector_uses' from Cases factor
								Channel_Specific_Reliability_n__l_m_1__selector_uses_B[n][l][m][0] = CasesOp.BAverageLogarithm(Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l][m]);
								// Message to 'Channel_Specific_Reliability_n__l_m_1__selector' from Replicate factor
								Channel_Specific_Reliability_n__l_m_1__selector_B[n][l][m] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Channel_Specific_Reliability_n__l_m_1__selector_uses_B[n][l][m], Channel_Specific_Reliability_n__l_m_1__selector_B[n][l][m]);
								// Message to 'Channel_Specific_Reliability_n__l' from Copy factor
								Channel_Specific_Reliability_n__l_B[n][l][m] = ArrayHelper.SetTo<Bernoulli>(Channel_Specific_Reliability_n__l_B[n][l][m], Channel_Specific_Reliability_n__l_m_1__selector_B[n][l][m]);
							}
							// Message to 'Channel_Specific_Reliability_n_' from Copy factor
							Channel_Specific_Reliability_n__B[n][m][l] = ArrayHelper.SetTo<Bernoulli>(Channel_Specific_Reliability_n__B[n][m][l], Channel_Specific_Reliability_n__l_B[n][l][m]);
							if (!this.Vbool____3[n][m]) {
								// Message to 'Cluster_Assignment_n__selector_cases_depth1_rep4_uses' from Cases factor
								Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B[n][l][m][0] = Bernoulli.FromLogOdds(CasesOp.AverageLogFactor(Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l][m], this.Channel_Specific_Reliability_marginal_F[n][m]));
							}
							// Message to 'Cluster_Assignment_n__selector_cases_depth1_rep4' from Replicate factor
							Cluster_Assignment_n__selector_cases_depth1_rep4_B[n][l][m] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B[n][l][m], Cluster_Assignment_n__selector_cases_depth1_rep4_B[n][l][m]);
						}
					}
					for(int n = 0; n<8; n++) {
						// Message to 'Cluster_Assignment_n__selector_cases_depth1_uses' from Replicate factor
						Cluster_Assignment_n__selector_cases_depth1_uses_B[n][l][7] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Cluster_Assignment_n__selector_cases_depth1_rep4_B[n][l], Cluster_Assignment_n__selector_cases_depth1_uses_B[n][l][7]);
					}
				}
				for(int n = 0; n<8; n++) {
					for(int _iv = 0; _iv<8; _iv++) {
						// Message to 'Cluster_Assignment_n__selector_cases_depth1' from Replicate factor
						Cluster_Assignment_n__selector_cases_depth1_B[n][_iv] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Cluster_Assignment_n__selector_cases_depth1_uses_B[n][_iv], Cluster_Assignment_n__selector_cases_depth1_B[n][_iv]);
					}
					// Message to 'Cluster_Assignment_n__selector_uses' from CasesInt factor
					Cluster_Assignment_n__selector_uses_B[n][0] = IntCasesOp.IAverageLogarithm(Cluster_Assignment_n__selector_cases_depth1_B[n], Cluster_Assignment_n__selector_uses_B[n][0]);
					// Message to 'Cluster_Assignment_n__selector' from Replicate factor
					Cluster_Assignment_n__selector_B[n] = ReplicateOp.DefAverageLogarithm<Discrete>(Cluster_Assignment_n__selector_uses_B[n], Cluster_Assignment_n__selector_B[n]);
					// Message to 'Cluster_Assignment_marginal' from Variable factor
					this.Cluster_Assignment_marginal_F[n] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(Cluster_Assignment_n__selector_B[n], this.cluster_Prior[n], this.Cluster_Assignment_marginal_F[n]);
					for(int m = 0; m<6; m++) {
						// Message to 'Channel_Specific_Reliability_use' from Enter factor
						this.Channel_Specific_Reliability_use_B[n][m] = GateEnterOp<bool>.ValueAverageLogarithm<Bernoulli>(Channel_Specific_Reliability_n__B[n][m], this.Cluster_Assignment_marginal_F[n], this.Channel_Specific_Reliability_use_B[n][m]);
					}
					for(int m = 0; m<6; m++) {
						_hoist[n] = BernoulliFromBetaOp.SampleAverageLogarithm(this.Device_Reliability_marginal_F[n]);
						m = 6-1;
					}
					for(int m = 0; m<6; m++) {
						// Message to 'Channel_Specific_Reliability_marginal' from Variable factor
						this.Channel_Specific_Reliability_marginal_F[n][m] = VariableVmpOp.MarginalAverageLogarithm<Bernoulli>(this.Channel_Specific_Reliability_use_B[n][m], _hoist[n], this.Channel_Specific_Reliability_marginal_F[n][m]);
						// Message to 'Device_Reliability_rep' from Bernoulli factor
						Device_Reliability_rep_B[n][m] = BernoulliFromBetaOp.ProbTrueAverageLogarithm(this.Channel_Specific_Reliability_marginal_F[n][m]);
					}
					// Message to 'Device_Reliability_use' from Replicate factor
					this.Device_Reliability_use_B[n] = ReplicateOp.DefAverageLogarithm<Beta>(Device_Reliability_rep_B[n], this.Device_Reliability_use_B[n]);
					for(int l = 0; l<8; l++) {
						for(int m = 0; m<6; m++) {
							if (!this.Vbool____3[n][m]) {
								// Message to 'Channel_Availibility_for_Cluster_l_m__1_' from Bernoulli factor
								Channel_Availibility_for_Cluster_l_m__1__B[n][l][m] = BernoulliFromBetaOp.ProbTrueAverageLogarithm(vbool10_marginal_F[n][l][m]);
								// Message to 'Channel_Availibility_for_Cluster_l_m__depth1' from Copy factor
								Channel_Availibility_for_Cluster_l_m__depth1_B[n][l][m][1] = ArrayHelper.SetTo<Beta>(Channel_Availibility_for_Cluster_l_m__depth1_B[n][l][m][1], Channel_Availibility_for_Cluster_l_m__1__B[n][l][m]);
								// Message to 'Channel_Availibility_for_Cluster_l__m_1_' from EnterPartial factor
								Channel_Availibility_for_Cluster_l__m_1__B[n][l][m] = GateEnterPartialOp<double>.ValueAverageLogarithm<Beta>(Channel_Availibility_for_Cluster_l_m__depth1_B[n][l][m], this.Channel_Specific_Reliability_marginal_F[n][m], new int[2] {0, 1}, Channel_Availibility_for_Cluster_l__m_1__B[n][l][m]);
								// Message to 'Channel_Availibility_for_Cluster_l_' from Copy factor
								Channel_Availibility_for_Cluster_l__B[n][l][m] = ArrayHelper.SetTo<Beta>(Channel_Availibility_for_Cluster_l__B[n][l][m], Channel_Availibility_for_Cluster_l__m_1__B[n][l][m]);
							}
							// Message to 'Channel_Availibility_for_Cluster_rep' from EnterOne factor
							Channel_Availibility_for_Cluster_rep_B[l][m][n] = GateEnterOneOp<double>.ValueAverageLogarithm<Beta>(Channel_Availibility_for_Cluster_l__B[n][l][m], this.Cluster_Assignment_marginal_F[n], l, Channel_Availibility_for_Cluster_rep_B[l][m][n]);
						}
					}
				}
				for(int l = 0; l<8; l++) {
					for(int m = 0; m<6; m++) {
						// Message to 'Channel_Availibility_for_Cluster_use' from Replicate factor
						this.Channel_Availibility_for_Cluster_use_B[l][m] = ReplicateOp.DefAverageLogarithm<Beta>(Channel_Availibility_for_Cluster_rep_B[l][m], this.Channel_Availibility_for_Cluster_use_B[l][m]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int n = 0; n<8; n++) {
				// Message to 'Device_Reliability_marginal' from Variable factor
				this.Device_Reliability_marginal_F[n] = VariableVmpOp.MarginalAverageLogarithm<Beta>(this.Device_Reliability_use_B[n], this.reliability_Prior[n], this.Device_Reliability_marginal_F[n]);
				for(int m = 0; m<6; m++) {
					_hoist[n] = BernoulliFromBetaOp.SampleAverageLogarithm(this.Device_Reliability_marginal_F[n]);
					m = 6-1;
				}
				for(int m = 0; m<6; m++) {
					// Message to 'Channel_Specific_Reliability_marginal' from Variable factor
					this.Channel_Specific_Reliability_marginal_F[n][m] = VariableVmpOp.MarginalAverageLogarithm<Bernoulli>(this.Channel_Specific_Reliability_use_B[n][m], _hoist[n], this.Channel_Specific_Reliability_marginal_F[n][m]);
					for(int l = 0; l<8; l++) {
						if (!this.Vbool____3[n][m]) {
							// Message to 'Cluster_Assignment_n__selector_cases_depth1_rep4_uses' from Cases factor
							Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B[n][l][m][0] = Bernoulli.FromLogOdds(CasesOp.AverageLogFactor(Channel_Specific_Reliability_n__l_m_1__selector_cases_depth1_B[n][l][m], this.Channel_Specific_Reliability_marginal_F[n][m]));
						}
						// Message to 'Cluster_Assignment_n__selector_cases_depth1_rep4' from Replicate factor
						Cluster_Assignment_n__selector_cases_depth1_rep4_B[n][l][m] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Cluster_Assignment_n__selector_cases_depth1_rep4_uses_B[n][l][m], Cluster_Assignment_n__selector_cases_depth1_rep4_B[n][l][m]);
					}
				}
				for(int l = 0; l<8; l++) {
					// Message to 'Cluster_Assignment_n__selector_cases_depth1_uses' from Replicate factor
					Cluster_Assignment_n__selector_cases_depth1_uses_B[n][l][7] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Cluster_Assignment_n__selector_cases_depth1_rep4_B[n][l], Cluster_Assignment_n__selector_cases_depth1_uses_B[n][l][7]);
				}
				for(int _iv = 0; _iv<8; _iv++) {
					// Message to 'Cluster_Assignment_n__selector_cases_depth1' from Replicate factor
					Cluster_Assignment_n__selector_cases_depth1_B[n][_iv] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Cluster_Assignment_n__selector_cases_depth1_uses_B[n][_iv], Cluster_Assignment_n__selector_cases_depth1_B[n][_iv]);
				}
				// Message to 'Cluster_Assignment_n__selector_uses' from CasesInt factor
				Cluster_Assignment_n__selector_uses_B[n][0] = IntCasesOp.IAverageLogarithm(Cluster_Assignment_n__selector_cases_depth1_B[n], Cluster_Assignment_n__selector_uses_B[n][0]);
				// Message to 'Cluster_Assignment_n__selector' from Replicate factor
				Cluster_Assignment_n__selector_B[n] = ReplicateOp.DefAverageLogarithm<Discrete>(Cluster_Assignment_n__selector_uses_B[n], Cluster_Assignment_n__selector_B[n]);
				// Message to 'Cluster_Assignment_marginal' from Variable factor
				this.Cluster_Assignment_marginal_F[n] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(Cluster_Assignment_n__selector_B[n], this.cluster_Prior[n], this.Cluster_Assignment_marginal_F[n]);
				for(int l = 0; l<8; l++) {
					for(int m = 0; m<6; m++) {
						if (!this.Vbool____3[n][m]) {
							// Message to 'Channel_Availibility_for_Cluster_l__m_1_' from EnterPartial factor
							Channel_Availibility_for_Cluster_l__m_1__B[n][l][m] = GateEnterPartialOp<double>.ValueAverageLogarithm<Beta>(Channel_Availibility_for_Cluster_l_m__depth1_B[n][l][m], this.Channel_Specific_Reliability_marginal_F[n][m], new int[2] {0, 1}, Channel_Availibility_for_Cluster_l__m_1__B[n][l][m]);
							// Message to 'Channel_Availibility_for_Cluster_l_' from Copy factor
							Channel_Availibility_for_Cluster_l__B[n][l][m] = ArrayHelper.SetTo<Beta>(Channel_Availibility_for_Cluster_l__B[n][l][m], Channel_Availibility_for_Cluster_l__m_1__B[n][l][m]);
						}
						// Message to 'Channel_Availibility_for_Cluster_rep' from EnterOne factor
						Channel_Availibility_for_Cluster_rep_B[l][m][n] = GateEnterOneOp<double>.ValueAverageLogarithm<Beta>(Channel_Availibility_for_Cluster_l__B[n][l][m], this.Cluster_Assignment_marginal_F[n], l, Channel_Availibility_for_Cluster_rep_B[l][m][n]);
					}
				}
			}
			for(int l = 0; l<8; l++) {
				for(int m = 0; m<6; m++) {
					// Message to 'Channel_Availibility_for_Cluster_use' from Replicate factor
					this.Channel_Availibility_for_Cluster_use_B[l][m] = ReplicateOp.DefAverageLogarithm<Beta>(Channel_Availibility_for_Cluster_rep_B[l][m], this.Channel_Availibility_for_Cluster_use_B[l][m]);
					// Message to 'Channel_Availibility_for_Cluster_marginal' from Variable factor
					this.Channel_Availibility_for_Cluster_marginal_F[l][m] = VariableVmpOp.MarginalAverageLogarithm<Beta>(this.Channel_Availibility_for_Cluster_use_B[l][m], this.channel_Prior[l][m], this.Channel_Availibility_for_Cluster_marginal_F[l][m]);
				}
			}
			this.Changed_numberOfIterationsDecreased_Reliability_Prior_Channel_Prior_vbool____3_Observations_Cluster_1_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Device_Reliability' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Beta,double> Device_ReliabilityMarginal()
		{
			return this.Device_Reliability_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Channel_Specific_Reliability' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Channel_Specific_ReliabilityMarginal()
		{
			return this.Channel_Specific_Reliability_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Cluster_Assignment' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> Cluster_AssignmentMarginal()
		{
			return this.Cluster_Assignment_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Channel_Availibility_for_Cluster' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> Channel_Availibility_for_ClusterMarginal()
		{
			return this.Channel_Availibility_for_Cluster_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of Observations and Reliability_Prior and Cluster_Prior and Channel_Prior and vbool____3</summary>
		private void Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3()
		{
			if (this.Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3_iterationsDone==1) {
				return ;
			}
			this.Observations_marginal = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8, delegate(int n) {
				return new DistributionStructArray<Bernoulli,bool>(6, delegate(int m) {
					return Bernoulli.Uniform();
				});
			});
			this.Observations_marginal = Distribution.SetPoint<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.Observations_marginal, this.observations);
			this.Reliability_Prior_marginal = new PointMass<Beta[]>(this.reliability_Prior);
			this.Cluster_Prior_marginal = new PointMass<Discrete[]>(this.cluster_Prior);
			this.Channel_Prior_marginal = new PointMass<Beta[][]>(this.channel_Prior);
			this.vbool____3_marginal = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(8, delegate(int n) {
				return new DistributionStructArray<Bernoulli,bool>(6, delegate(int m) {
					return Bernoulli.Uniform();
				});
			});
			this.vbool____3_marginal = Distribution.SetPoint<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.vbool____3_marginal, this.Vbool____3);
			this.Changed_Observations_Reliability_Prior_Cluster_Prior_Channel_Prior_vbool____3_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Observations' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ObservationsMarginal()
		{
			return this.Observations_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Reliability_Prior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[]> Reliability_PriorMarginal()
		{
			return this.Reliability_Prior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Cluster_Prior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Discrete[]> Cluster_PriorMarginal()
		{
			return this.Cluster_Prior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Channel_Prior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][]> Channel_PriorMarginal()
		{
			return this.Channel_Prior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool____3' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Vbool____3Marginal()
		{
			return this.vbool____3_marginal;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
