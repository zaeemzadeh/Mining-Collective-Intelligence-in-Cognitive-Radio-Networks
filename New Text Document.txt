using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using MicrosoftResearch.Infer.Models;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Maths;

namespace MicrosoftResearch.Infer.Tutorials
{
    public class MiningCRN
    {
        public void Run()
        {
            int N = 3;  // number of devices
            int M = 1;  // number of channel
            int L = 2 * N; // group truncation 

            // defining range for each random variable
            Range n = new Range(N).Named("n");
            Range m = new Range(M).Named("m");
            Range l = new Range(L).Named("l");
            double[] group_weights = new double[L]; // initial probabilities for groups assignment
            for (int i = 0; i < L; i++)
            {
                group_weights[i] = 1.0 / L;
            }
            // Defining Latent Variables
            VariableArray<double> R = Variable.Array<double>(n).Named("Device Reliability");
            VariableArray2D<bool> U = Variable.Array<bool>(n, m).Named("Channel Specific Reliability");
            VariableArray<int> G = Variable.Array<int>(n).Named("Cluster Assignment");
            VariableArray2D<double> C = Variable.Array<double>(l, m).Named("Channel Availibility for Cluster");
            VariableArray2D<bool> Y = Variable.Array<bool>(n, m).Named("Observations");

            // Specifying priors for the latent variables
            VariableArray<Beta> ReliabilityPrior = Variable.Array<Beta>(n).Named("Reliability Prior");
            VariableArray<Discrete> ClusterPrior = Variable.Array<Discrete>(n).Named("Cluster Prior");
            VariableArray2D<Beta> ChannelPrior = Variable.Array<Beta>(l,m).Named("Channel Prior");

            ReliabilityPrior.ObservedValue = Enumerable.Repeat(new Beta(5, 1), N).ToArray();

            ClusterPrior.ObservedValue = Enumerable.Repeat(new Discrete(group_weights), L).ToArray();

            for (int i = 0; i < N; i++)
            {
                for(int j = 0; j < M; j++)
                {

                }
                for (int k = 0; k < L; k++)
                {

                }
            }

            R[n] = Variable.Beta(5, 1).ForEach(n);
            U[n, m] = Variable.Bernoulli(R[n]).ForEach(m);
            G[n] = Variable.Discrete(l, group_weights).ForEach(n);
            //G[n] = Variable.DiscreteUniform(l).ForEach(n);
            C[l, m] = Variable.Beta(1, 1).ForEach(l, m);



            // Specifying the function for observation
            bool[,] d_data = new bool[N, M];
            bool[,] d_missing = new bool[N, M];
            for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < M; j++)
                {
                    d_data[i, j] = false;
                    d_missing[i, j] = (i%2 == 0) && (j%2 == 0);
                }
            }
            VariableArray2D<bool> v_missing = Variable.Observed(d_missing, n, m);
            //VariableArray2D<bool> v_data = Variable.Observed(d_data, n, m);

            
            using (Variable.ForEach(n))
            {
                using (Variable.Switch(G[n]))
                {
                    using (Variable.ForEach(m))
                    {
                        using (Variable.IfNot(v_missing[n, m]))
                        {
                            using (Variable.If(U[n, m]))
                            {
                                Y[n, m] = Variable.Bernoulli(C[G[n], m]);   // reliable device
                            }
                            using (Variable.IfNot(U[n, m]))
                            {
                                Y[n, m] = !Variable.Bernoulli(C[G[n], m]);  // unreliable device
                            }
                        }
                    }
                }
            }
            Y.ObservedValue = d_data;

            
                

            InferenceEngine ie = new InferenceEngine();
            //ie.ShowFactorGraph = true;
            //ie.Algorithm = new VariationalMessagePassing();
            DistributionArray<Beta> obs_dist = ie.Infer<DistributionArray<Beta>>(R);
            //ReliabilityPrior.ObservedValue = obs_dist;
            Console.Write(obs_dist);
        }

        public void GetInfo(ref int N, ref int M, ref int T)
        {
            
        }
        public void GetData(int N, int M, int T, ref double[,,] d_data) {
            //d_data = 
        }

        static void Main(string[] args)
        {
            MiningCRN a = new MiningCRN();
            a.Run();
            Console.ReadKey();
        }

    } 

}

